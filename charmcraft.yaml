# Copyright 2025 Canonical
# See LICENSE file for licensing details.
name: parca-k8s
summary: Parca continuous profiling tool.
description: |
  Continuous profiling for analysis of CPU and memory usage, down to the line number and throughout
  time. Saving infrastructure cost, improving performance, and increasing reliability.

type: "charm"

links:
  documentation: https://discourse.charmhub.io/t/16552
  website: https://charmhub.io/parca-k8s
  source: https://github.com/canonical/parca-k8s-operator
  issues: https://github.com/canonical/parca-k8s-operator/issues

platforms:
  ubuntu@24.04:amd64:
  ubuntu@22.04:amd64:

parts:
  charm:
    charm-binary-python-packages: [ cryptography, jsonschema, pydantic, pydantic-core, maturin ]
    # include rustc and cargo to compile pydantic
    build-packages: [ git, rustc, cargo ]
    charm-requirements: [requirements.txt]
    build-snaps: [astral-uv]
    override-build: |
      uv export --frozen --no-hashes --format=requirements-txt -o requirements.txt
      craftctl default

assumes:
  - juju >= 3.1

containers:
  parca:
    resource: parca-image
    mounts:
      - storage: profiles
        location: /var/lib/parca
  nginx:
    resource: nginx-image
  nginx-prometheus-exporter:
    resource: nginx-prometheus-exporter-image


resources:
  parca-image:
    type: oci-image
    description: OCI image for parca
    # Included for simplicity in integration tests
    upstream-source: docker.io/ubuntu/parca:0.23.1-24.04
  nginx-image:
    type: oci-image
    description: OCI image for nginx
    upstream-source: ubuntu/nginx:1.24-24.04_beta
  nginx-prometheus-exporter-image:
    type: oci-image
    description: OCI image for nginx-prometheus-exporter
    upstream-source: nginx/nginx-prometheus-exporter:1.1.0


storage:
  profiles:
    type: filesystem

requires:
  catalogue:
    interface: catalogue
    description: Display parca entry in the COS catalogue frontend.
  s3:
    interface: s3
    description: S3 bucket to store the profiles in.
  profiling-endpoint:
    interface: parca_scrape
    description: |
      Integration to configure parca to scrape a profiling endpoint from a related charm.
  ingress:
    interface: traefik_route
    limit: 1
    description: |
      Ingress integration for the Parca server and profiling ingestion endpoints,
      so that cross-model workloads can send their profiles to Parca through the ingress.
      Uses `traefik_route` to open the right ports on the Traefik host.
  external-parca-store-endpoint:
    interface: parca_store
    description: |
      Push profiles from this parca server to a remote parca server.
  charm-tracing:
    description: |
      Enables sending charm traces to a distributed tracing backend such as Tempo.
    limit: 1
    interface: tracing
  workload-tracing:
    interface: tracing
    limit: 1
    description: |
      Enables sending workload traces to a distributed tracing backend such as Tempo.
  certificates:
    interface: tls-certificates
    limit: 1
    description: |
      Certificate and key files for securing Parca's external
      communications through TLS.
  logging:
    interface: loki_push_api
    description: |
        Enables sending workload logs to a loki-push-api compatible endpoint.

provides:
  grafana-dashboard:
    interface: grafana_dashboard
    description: |
      This integration provisions a grafana dashboard to monitor this charm.
  grafana-source:
    interface: grafana_datasource
    description: |
      This integration configures this parca server as a datasource on a grafana instance.
  metrics-endpoint:
    interface: prometheus_scrape
    description: |
      Endpoint to allow prometheus metrics to be scraped from this parca instance.
  self-profiling-endpoint:
    interface: parca_scrape
    description: |
      Endpoint to allow this parca instance profiles to be scraped by a remote parca instance.
  parca-store-endpoint:
    interface: parca_store
    description: |
      Endpoint at which profiles can be pushed by, for example, a remote parca server or parca-agent.

peers:
  parca-peers:
    interface: parca_peers

config:
  options:
    enable-persistence:
      description: |
        Do not store profiles in memory, persist to disk. Location for persistence is '/var/lib/parca'
      type: boolean
      default: false

    memory-storage-limit:
      description: |
        When storing profiles in memory, configure the in-memory storage limit, specified in MB.

        Does nothing if enable-persistence is True.
      type: int
      default: 4096
